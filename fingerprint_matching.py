# -*- coding: utf-8 -*-
"""fingerprint matching

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I85sD-vIZFJ4IgiSA4GVU2If-YpXcgb_
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d ruizgara/socofing

import zipfile

zip_ref = zipfile.ZipFile('/content/socofing.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

import cv2
from google.colab.patches import cv2_imshow

sample = cv2.imread("/content/socofing/SOCOFing/Altered/Altered-Hard/100__M_Left_index_finger_CR.BMP")
sample = cv2.resize(sample,None,fx=2.5, fy=2.5)

cv2_imshow(sample)
cv2.waitKey(0)
cv2.destroyAllWindows()

import os

for file in [file for file in os.listdir("/content/socofing/SOCOFing/Real")]:
    fingerprint_database_image = cv2.imread("/content/socofing/SOCOFing/Real/" + file)

    sift = cv2.xfeatures2d.SIFT_create()

    keypoints_1, descriptors_1 = sift.detectAndCompute(sample, None)
    keypoints_2, descriptors_2 = sift.detectAndCompute(fingerprint_database_image, None)

    matches = cv2.FlannBasedMatcher(dict(algorithm=1, trees=10),
                                    dict()).knnMatch(descriptors_1, descriptors_2, k=2)

    match_points = []
    for p, q in matches:
        if p.distance < 0.1 * q.distance:
            match_points.append(p)
        keypoints = 0
        if len(keypoints_1) <= len(keypoints_2):
            keypoints = len(keypoints_1)
        else:
            keypoints = len(keypoints_2)

        if (len(match_points) / keypoints) > 0.95:
            print("% match: ", len(match_points) / keypoints * 100)
            print("Figerprint ID: " + str(file))
            result = cv2.drawMatches(sample, keypoints_1, fingerprint_database_image,
                                     keypoints_2, match_points, None)
            result = cv2.resize(result, None, fx=2.5, fy=2.5)
            cv2.imshow("result", result)
            cv2.waitKey(0)
            cv2.destroyAllWindows()
            break;

